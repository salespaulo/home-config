#!/bin/bash

VERSION="1.0"
EMAIL="ma_muquit@fccc.edu"
VER="Makefile automatically generated by genmake $VERSION, `date '+%h-%d-%y'`"
DATE=`date +%b-%d-%Y`
AUTHOR="genmake $VERSION by $EMAIL"

function genGenericMake() {
	local fname=${3:-"Makefile"};
	local opc=${1};

	local nprog=${2};
	local cc=${CC};

	local dir=;
	local sharedlibrary=;

	local test_lib=;

	case ${opc} in
		"lib")		dir="lib";
					prog="lib${prog}.a";;
		"shared")	dir="lib";
					STRIP="";
					prog="lib${nprog}.so";
					sharedlibrary="-shared";
					test_lib="test_lib";;
		*)			STRIP="";
					dir="bin";;
	esac

	[ ! -z "${sharedlibrary}" ] && {
		local machine=$(uname);
		[ "${machine}" == "SunOS" ] && local sharedlibrary="-G";
	}

	cat >> ${fname} <<EOF
##
# ${VER}
# ${AUTHOR}
#
# \$Id: genmake.sh,v 1.10 2007/12/05 13:24:33 pleao Exp $
#
# By Pedro Robson Leao pedro.leao@gmail.com
#
##

# Variaveis para compilacao ...
CC= ${cc}
AR= ar cq
RANLIB= ranlib

# Diretorio de instalacao ...
# Troque o diretorio ./${dir} pelo seu diretorio de libs
BASEINSTALL=./${dir}

# Definicoes pessoais
DEFS=

# Nome do programa final ...
PROGNAME= ./${prog}

# Diretorios a incluir na compilacao ...
INCLUDES=  -I.

# Bibliotecas a incluir na compilacao ...
LIBS=

DEFINES= \$(DEFS) -DSYS_UNIX=1

# Comando strip - limpa acesso aos nomes das funcoes via programa nm
STRIP=strip

# Opcao para a compilacao com DEBUG
ifeq (\$(DEBUG),on)
	DBG=-g -D__DEBUG__
endif

# Flags de compilacao
CFLAGS= -O -Wall \$(DBG) \$(DEFINES) \$(INCLUDES)

# Flags de LinkEdicao
EOF
	[ "${opc}" == "shared" ] && {
		cat >> ${fname} <<EOF
LDFLAGS=\$(LIBS) ${sharedlibrary}
EOF
	}
	[ "${opc}" == "prog" ] && {
		cat >> ${fname} <<EOF
LDFLAGS=\$(LIBS)
EOF
	}

	cat >> ${fname} <<EOF
# Lista de Arquivos .o a serem criados neste diretorio
OBJS = ${OBJS}

# Regra para a compilacao
${EXT}.o:

# Regra geral a ser feita
all: \$(PROGNAME) ${test_lib} install-strip
EOF

	[ "${opc}" == "shared" ] && {
		cat >> ${fname} <<EOF

test_lib:
	@echo "#include <stdio.h> \n int main(int argc, char **argv)  { printf(\"Hello!!!\"); return 0; }\n" >x.c
	@\$(CC) \$(CFLAGS) x.c -L. -R. -l${nprog}
	@./a.out >/dev/null
	@rm -f a.out x.c
EOF
}
		cat >> ${fname} <<EOF

# Regra de LinkEdicao
\$(PROGNAME) : \$(OBJS)
EOF

	[ "${opc}" != "lib" ] && {
		cat >> ${fname} <<EOF
	\$(CC) \$(OBJS) \$(LDFLAGS) -o \$@

EOF
	}

	[ "${opc}" == "lib" ] && {
		cat >> ${fname} <<EOF
	\$(AR) \$@ \$(OBJS)
	\$(RANLIB) \$@
EOF
	}

	cat >> ${fname} <<EOF
# Regra de limpeza de arquivos .o e temporarios
clean:
	\$(RM) \$(OBJS) \$(PROGNAME) core *~ *.ln

# Regra para instalacao e strip
install-strip: strip install

# Regra para realizar o Strip (O Strip nao pode ser realizado em modo DEBUG e nem em libs.a)
strip:
ifneq (\$(DEBUG),on)
	#Strip file
	${STRIP}\$(STRIP) \$(PROGNAME)
endif

# Regra de instalacao
install:
	@#Verify dir file
	@mkdir -p \$(BASEINSTALL)

	#Copy files
	cp \$(PROGNAME) \$(BASEINSTALL)
EOF
}

[ ${#} -lt 2 ] && {
	echo "Use: ${0} [opc <prog|lib|shared>] [prog name] <makefile name>";
	exit 0;
}

STRIP="#";

opc=${1};
prog=${2};
make=${3:-"Makefile"};

objs_c="$( \ls -c1 *.c 2>/dev/null | tr '\n' ' ')";
[ ! -z "${objs_c}" ] && {
	CC="gcc";
	EXT=".c";
}
objs_C="$( \ls -c1 *.C  2>/dev/null | tr '\n' ' ')";
[ ! -z "${objs_C}" ] && {
	CC="g++";
	EXT=".C";
}
objs_cpp="$( \ls -c1 *.cpp 2>/dev/null | tr '\n' ' ')";
[ ! -z "${objs_cpp}" ] && {
	CC="g++";
	EXT=".cpp";
}
objs_cpp_="$( \ls -c1 *.c++ 2>/dev/null | tr '\n' ' ')";
[ ! -z "${objs_cpp_}" ] && {
	CC="g++";
	EXT=".c++";
}
objs_cc="$( \ls -c1 *.cc 2>/dev/null | tr '\n' ' ')";
[ ! -z "${objs_cc}" ] && {
	CC="g++";
	EXT=".cc";
}
OBJS="${objs_c} ${objs_C} ${objs_cpp} ${objs_cpp_} ${objs_cc}"
OBJS="${OBJS//\.c/.o}";
OBJS="${OBJS//\.C/.o}";
OBJS="${OBJS//\.cc/.o}";
OBJS="${OBJS//\.cpp/.o}";
OBJS="${OBJS//\.c++/.o}";

[ -f ${make} ] && {
	echo "O arquivo ${make} ja existe";
	exit 0;
}
genGenericMake ${opc} ${prog} ${make};
exit 0;
